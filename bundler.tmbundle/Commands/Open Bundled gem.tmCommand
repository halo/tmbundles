<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby18

unless ENV['TM_PROJECT_DIRECTORY']
  puts 'No TextMate project found'
  exit
end

require 'shellwords'
require 'yaml'
require ENV['TM_SUPPORT_PATH'] + '/lib/ui'

rvm_auto_ruby = File.join(ENV['HOME'], '.rvm', 'bin', 'rvm-auto-ruby')
ruby = ENV['TM_RUBY'] || (File.exist?(rvm_auto_ruby) ? rvm_auto_ruby : :ruby)

project = File.exist?(ENV['TM_PROJECT_DIRECTORY']+'/Gemfile.lock') ? ENV['TM_PROJECT_DIRECTORY'] : File.dirname(ENV['TM_FILEPATH'])
until File.exist?(File.join(project, 'Gemfile.lock')) or project == '/'
  project = File.expand_path('..', project)
end

gemfile_lock = File.join(project,'Gemfile.lock')
unless File.exist? gemfile_lock
  puts "No Gemfile.lock found, please run bundle install first."
  exit
end

thread = Thread.new do
  Thread.current.abort_on_exception = true
  dumper = 'require "bundler"; p Hash[Bundler.definition.specs.map{ |s| [s.name, s.full_gem_path] }]'
  message = `cd #{project.shellescape}; #{ruby} -S bundle check`
  unless $?.success?
    puts message
    exit 0
  end
  dump = `cd #{project.shellescape}; #{ruby} -rrubygems -e #{dumper.shellescape} 2&gt;/dev/null`
  raise `cd #{project.shellescape}; #{ruby} -rrubygems -e #{dumper.shellescape}` unless $?.success?
  eval dump
end

gems = (File.read(gemfile_lock).scan(/^    ([^\( ]+) \(/).flatten + ['bundler']).uniq.sort
gem = TextMate::UI.request_item(:items =&gt; gems, :title =&gt; 'Select the gem to open')
exit if gem.nil?

thread.join
true_gems = thread.value
true_gem = true_gems[gem]
system "open txmt://open/?url=file://#{true_gem}"
</string>
	<key>input</key>
	<string>none</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>keyEquivalent</key>
	<string>~@o</string>
	<key>name</key>
	<string>Open Bundled Gem</string>
	<key>outputCaret</key>
	<string>afterOutput</string>
	<key>outputFormat</key>
	<string>text</string>
	<key>outputLocation</key>
	<string>toolTip</string>
	<key>uuid</key>
	<string>E8DA5243-13C9-41F3-9DA7-51163E948C27</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
