<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby
#
# Sass variable block tidier, version 0.2.
#
# Copyright Nathan Henderson 2010-2011
# based on Assignment block tidier, version 0.1. by Chris Poirier 2006.
#
# This script can be used as a command for TextMate to align all 
# of the Sass variable assignments in a block of text.  When using it 
# with TextMate, set the command input to "Selected Text", and the
# output to "Replace Selected Text".  Map it to a key equivalent,
# and any time you want to tidy up a block, either select it, or put
# your cursor somewhere within it; then hit the key equivalent.  Voila.
#

lines = STDIN.readlines()
selected_text = ENV.member?("TM_SELECTED_TEXT")

relevant_line_pattern = /^[$][^:]+\w[:]/
column_search_pattern = /[\t ]*:/


#
# If called on a selection, every assignment statement
# is in the block.  If called on the document, we start on the 
# current line and look up and down for the start and end of the
# block.

if selected_text then
   block_top    = 1
   block_bottom = lines.length
else
 
   #
   # We start looking on the current line.  However, if the
   # current line doesn't match the pattern, we may be just
   # after or just before a block, and we should check.  If
   # neither, we are done.

   start_on      = ENV["TM_LINE_NUMBER"].to_i
   block_top     = lines.length + 1
   block_bottom  = 0
   search_top    = 1
   search_bottom = lines.length
   search_failed = false

   if lines[start_on - 1] !~ relevant_line_pattern then
      if lines[start_on - 2] =~ relevant_line_pattern then
         search_bottom = start_on = start_on - 1
      elsif lines[start_on] =~ relevant_line_pattern then
         search_top = start_on = start_on
      else
         search_failed = true
      end 
   end

   #
   # Now with the search boundaries set, start looking for
   # the block top and bottom.
   
   unless search_failed
      start_on.downto(search_top) do |number|
         if lines[number-1] =~ relevant_line_pattern then
            block_top = number
         else
            break
         end
      end
      
      start_on.upto(search_bottom) do |number|
         if lines[number-1] =~ relevant_line_pattern then
            block_bottom = number
         else
            break
         end
      end
   end
end


#
# Now, iterate over the block and find the best column number
# for the colon.  The pattern will tell us the position of the
# first bit of whitespace before the colon.  We put the colon
# to the right of the furthest-right one.  Note that we cannot
# assume every line in the block is relevant.

best_column = 0
block_top.upto(block_bottom) do |number|
   line = lines[number - 1]
   if line =~ relevant_line_pattern then
      m = column_search_pattern.match(line)
      best_column = m.begin(0) if m.begin(0) &gt; best_column
   end
end

   
#
# Reformat the block.  Again, we cannot assume all lines in the 
# block are relevant.

block_top.upto(block_bottom) do |number|
   if lines[number-1] =~ relevant_line_pattern then
      before, after = lines[number-1].split(/[\t ]*:[\t ]*/, 2)
      before = [before, ":"].join
      lines[number-1] = [before.ljust(best_column + 1), after].join(" ")
   end
end


#
# Output the replacement text

lines.each do |line|
   puts line
end
</string>
	<key>fallbackInput</key>
	<string>none</string>
	<key>input</key>
	<string>selection</string>
	<key>keyEquivalent</key>
	<string>^~@;</string>
	<key>name</key>
	<string>Align Variable Assignments</string>
	<key>output</key>
	<string>replaceSelectedText</string>
	<key>scope</key>
	<string>source.sass</string>
	<key>uuid</key>
	<string>5A998214-23DB-4482-927C-D02A57C78ACF</string>
</dict>
</plist>
