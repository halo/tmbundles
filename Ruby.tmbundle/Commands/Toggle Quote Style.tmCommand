<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>changed</key>
	<dict>
		<key>command</key>
		<string>#!/usr/bin/env ruby18

class String
  def escape(char)
    gsub(/\\.|#{Regexp.quote(char)}/) { |match| match == char ? "\\#{char}" : match }
  end

  def unescape(char)
    gsub(/\\./) { |match| match == "\\#{char}" ? char : match }
  end
end

print case str = STDIN.read
  # Handle standard quotes
  when /\A"(.*)"\z/m;          "'"   + $1.unescape('"').escape("'") + "'"
  when /\A'(.*)'\z/m;          '"'   + $1.unescape("}").escape('"') + '"'

  # Handle the more esoteric quote styles
  when /\A%[Qq]?\[(.*)(\])\z/m,
       /\A%[Qq]?\((.*)(\))\z/m,
       /\A%[Qq]?&lt;(.*)(&gt;)\z/m;  '"' + $1.unescape($2).escape('"') + '"'
  when /\A%[Qq]?(.)(.*)\1\z/m; '"' + $2.unescape($1).escape('"') + '"'

  # Handle shell escapes
  when /\A`(.*)`\z/m;          "%x{" + $1.unescape("`").escape("}") + "}"
  when /\A%x\{(.*)\}\z/m;      "`"   + $1.unescape("}").escape("`") + "`"

  # Default case
  else str
end
</string>
		<key>inputFormat</key>
		<string>text</string>
		<key>keyEquivalent</key>
		<string>@"</string>
		<key>outputCaret</key>
		<string>heuristic</string>
		<key>outputFormat</key>
		<string>text</string>
		<key>outputLocation</key>
		<string>replaceInput</string>
		<key>version</key>
		<integer>2</integer>
	</dict>
	<key>deleted</key>
	<array>
		<string>output</string>
	</array>
	<key>isDelta</key>
	<true/>
	<key>uuid</key>
	<string>6519CB08-8326-4B77-A251-54722FFBFC1F</string>
</dict>
</plist>
